import { currentUser } from "@clerk/nextjs/server";
import { db } from "@/lib/db";
import { NextResponse } from "next/server";

export async function DELETE() {
    try {
        const user = await currentUser();
        
        // Solo permitir al administrador principal
        if (!user || user.primaryEmailAddress?.emailAddress !== "chiscojjcm@gmail.com") {
            return new NextResponse("No autorizado", { status: 401 });
        }

        console.log("üßπ Eliminando cursos autom√°ticos no deseados...");

        // Lista de t√≠tulos de cursos autom√°ticos que queremos eliminar
        const autoCourseTitles = [
            "T√©cnico en Reparaci√≥n de Computadoras",
            "T√©cnico en Electr√≥nica Industrial", 
            "T√©cnico en Mec√°nica Automotriz",
            "T√©cnico en Instalaciones El√©ctricas",
            "T√©cnico en Electricidad",
            "T√©cnico en Mec√°nica",
            "T√©cnico en Computaci√≥n",
            "T√©cnico en Electr√≥nica",
            "T√©cnico en Soldadura",
            "T√©cnico en Refrigeraci√≥n",
            "T√©cnico en Automotriz",
            "T√©cnico en Construcci√≥n"
        ];

        // Buscar cursos que coincidan con estos t√≠tulos
        const coursesToDelete = await db.course.findMany({
            where: {
                title: {
                    in: autoCourseTitles
                }
            },
            include: {
                chapters: true,
                attachments: true,
                purchases: true,
                pensumTopics: true
            }
        });

        console.log(`üìã Encontrados ${coursesToDelete.length} cursos autom√°ticos para eliminar`);

        if (coursesToDelete.length === 0) {
            return NextResponse.json({ 
                message: "No hay cursos autom√°ticos para eliminar",
                deleted: 0 
            });
        }

        let deletedCount = 0;
        const deletedCourses = [];

        // Eliminar cada curso y sus dependencias
        for (const course of coursesToDelete) {
            console.log(`üóëÔ∏è Eliminando curso: ${course.title}`);

            try {
                // 1. Eliminar progreso de usuarios relacionado a los cap√≠tulos
                if (course.chapters.length > 0) {
                    const chapterIds = course.chapters.map(ch => ch.id);
                    await db.userProgress.deleteMany({
                        where: {
                            chapterId: {
                                in: chapterIds
                            }
                        }
                    });
                }

                // 2. Eliminar compras del curso
                await db.purchase.deleteMany({
                    where: {
                        courseId: course.id
                    }
                });

                // 3. Eliminar attachments del curso
                await db.attachment.deleteMany({
                    where: {
                        courseId: course.id
                    }
                });

                // 4. Eliminar cap√≠tulos del curso
                await db.chapter.deleteMany({
                    where: {
                        courseId: course.id
                    }
                });

                // 5. Eliminar temas del pensum
                await db.pensumTopic.deleteMany({
                    where: {
                        courseId: course.id
                    }
                });

                // 6. Finalmente eliminar el curso
                await db.course.delete({
                    where: {
                        id: course.id
                    }
                });

                deletedCourses.push(course.title);
                deletedCount++;
                console.log(`   ‚úÖ Curso eliminado: ${course.title}`);

            } catch (error) {
                console.error(`‚ùå Error eliminando curso ${course.title}:`, error);
            }
        }

        // Estad√≠sticas finales
        const remainingCourses = await db.course.count();
        
        return NextResponse.json({
            success: true,
            message: "Cursos autom√°ticos eliminados exitosamente",
            deleted: deletedCount,
            deletedCourses,
            remainingCourses,
            details: {
                coursesDeleted: deletedCount,
                coursesRemaining: remainingCourses
            }
        });

    } catch (error) {
        console.error("‚ùå Error en eliminaci√≥n de cursos autom√°ticos:", error);
        return NextResponse.json(
            { error: "Error interno del servidor" },
            { status: 500 }
        );
    }
} 