import { PrismaClient } from "@prisma/client";

const database = new PrismaClient();

async function main() {
    try {
        console.log("üå± Iniciando poblaci√≥n de la base de datos...");

        // Crear categor√≠as espec√≠ficas para Instituto San Pablo
        const categories = [
            { name: "Primera Infancia" },
            { name: "Ingl√©s" },
            { name: "Pedagog√≠a" },
            { name: "Educaci√≥n" },
            { name: "Desarrollo Infantil" },
            { name: "Psicolog√≠a Infantil" },
            { name: "Metodolog√≠as de Ense√±anza" },
            { name: "Estimulaci√≥n Temprana" },
            { name: "Cuidado Infantil" },
            { name: "Desarrollo Cognitivo" }
        ];

        console.log("üìö Creando categor√≠as educativas...");
        for (const category of categories) {
            await database.category.upsert({
                where: { name: category.name },
                update: {},
                create: category
            });
        }

        console.log("‚úÖ Categor√≠as educativas creadas exitosamente");

        // ‚ö†Ô∏è  CURSOS AUTOM√ÅTICOS DESHABILITADOS
        console.log("‚ÑπÔ∏è  Los cursos autom√°ticos han sido deshabilitados");
        console.log("‚ÑπÔ∏è  Para crear cursos, usa el modo profesor en la interfaz web");
        
        // Mostrar resumen
        const totalCategories = await database.category.count();
        const totalCourses = await database.course.count();
        
        console.log("\nüìä RESUMEN:");
        console.log(`   üìö Categor√≠as disponibles: ${totalCategories}`);
        console.log(`   üéì Cursos existentes: ${totalCourses}`);
        console.log("\n‚úÖ Base de datos lista para Instituto San Pablo");
        
    } catch (error) {
        console.error("‚ùå Error poblando la base de datos:", error);
    } finally {
        await database.$disconnect();
    }
}

main();